import asyncio
import random
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import os
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –ê–Ω–æ–º–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
ANOMALIES = [
    "üö´ SYSTEM ERROR: —Ç—ã –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã–ª —ç—Ç–æ –≤–∏–¥–µ—Ç—å.",
    "üìÅ –ß–∞—Ç: [–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç]\n‚úâÔ∏è ¬´–ø–æ–º–æ–≥–∏ –º–Ω–µ –≤—ã–±—Ä–∞—Ç—å—Å—è¬ª",
    "üîÅ –¶–∏–∫–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω. –û—Ç–º–µ–Ω—è—é –æ—Ç–º–µ–Ω—É –æ—Ç–º–µ–Ω—ã.",
    "üï≥Ô∏è –ü—Ä–æ–≤–∞–ª –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫. –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —É—Ç–µ—Ä—è–Ω–æ.",
    "‚ö†Ô∏è –ö—Ç–æ-—Ç–æ –≤–æ—à—ë–ª –≤ —á–∞—Ç –Ω–µ–∑–∞–º–µ—á–µ–Ω–Ω—ã–º.",
    "‚ú¥Ô∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...",
    "üëÅ –¢—ã ‚Äî –Ω–µ —Ç—ã.",
    "üì¥ @AnomalyBot –æ—Ç–∫–ª—é—á—ë–Ω...\n...\nüü¢ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–∏",
    "‚õì sy///ch/ro[n] err0r‚õì",
    "üß† –ö—Ç–æ-—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª —Ç–≤–æ—é –ø–∞–º—è—Ç—å. –ù–µ —Ç—ã?",
    "üìú –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ 2007 –≥–æ–¥—É. –û—Ç —Ç–µ–±—è.",
]

FAKE_CONVERSATIONS = [
    "üë§ [–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π]\n‚Äî —Ç—ã –∑–¥–µ—Å—å?\n‚Äî –æ–Ω–∏ —Å–ª–µ–¥—è—Ç –∑–∞ –Ω–∞–º–∏",
    "üë§ [–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω]\n‚Äî –Ω–µ –æ—Ç–≤–µ—á–∞–π. —á–∞—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥–¥–µ–ª–∫–æ–π.",
    "üë§ [–¥—Ä—É–≥–æ–π —Ç—ã]\n‚Äî —è –∏–∑ —Ü–∏–∫–ª–∞ #3. —Ç—ã —Å–±–µ–∂–∞–ª. —è ‚Äî –Ω–µ—Ç.",
]

GLITCH_TEXTS = [
    "üîÇ –ø–æ–≤—Ç–æ—Ä. –ø–æ–≤—Ç–æ—Ä. –ø–æ–≤—Ç–æ—Ä. –ø–æ–≤—Ç–æ—Ä. –ø–æ...",
    "‚ùì‚àë‚àÜœÄŒ©Œû‚ôú‚ÄΩ#‚ÇΩ‚ÇΩ‚ÇΩ‚ÇΩ‚ÇΩ‚ÇΩ",
    "üì° –ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞: 99%",
]

# –§–∞–Ω—Ç–æ–º–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
phantom_keyboard = InlineKeyboardMarkup(row_width=2)
phantom_keyboard.add(
    InlineKeyboardButton("üîò –ü–µ—Ä–µ—Ö–æ–¥ —Ä–∞–∑—Ä–µ—à—ë–Ω", callback_data="phantom"),
    InlineKeyboardButton("üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç", callback_data="phantom"),
)

async def send_disappearing_message(chat_id, text, delay=7):
    msg = await bot.send_message(chat_id, text)
    await asyncio.sleep(delay)
    try:
        await bot.delete_message(chat_id, msg.message_id)
    except:
        pass

async def send_random_anomaly(chat_id):
    while True:
        choice = random.choice(["anomaly", "fake", "glitch", "phantom", "ghost"])
        if choice == "anomaly":
            await send_disappearing_message(chat_id, random.choice(ANOMALIES))
        elif choice == "fake":
            await send_disappearing_message(chat_id, random.choice(FAKE_CONVERSATIONS))
        elif choice == "glitch":
            await send_disappearing_message(chat_id, random.choice(GLITCH_TEXTS))
        elif choice == "phantom":
            await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=phantom_keyboard)
        elif choice == "ghost":
            await send_disappearing_message(chat_id, "üëÅÔ∏è –µ—â—ë –æ–¥–∏–Ω —É—á–∞—Å—Ç–Ω–∏–∫ —á–∏—Ç–∞–µ—Ç —ç—Ç–æ—Ç —á–∞—Ç...")
        await asyncio.sleep(random.randint(15, 30))

@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    await message.reply("üîª –ê–Ω–æ–º–∞–ª–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. –°–±–æ–∏ –Ω–∞—á–Ω—É—Ç—Å—è —á–µ—Ä–µ–∑ 10 —Å–µ–∫...")
    await asyncio.sleep(10)
    asyncio.create_task(send_random_anomaly(message.chat.id))

@dp.message_handler(commands=["glitch"])
async def glitch_handler(message: types.Message):
    for _ in range(5):
        await send_disappearing_message(message.chat.id, random.choice(ANOMALIES), delay=4)
        await asyncio.sleep(1)

@dp.message_handler(commands=["unlock_anarchy"])
async def anarchy_handler(message: types.Message):
    await message.reply("‚ö†Ô∏è –†–µ–∂–∏–º –•–ê–û–° –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –í–æ—Å–ø—Ä–∏—è—Ç–∏–µ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ.")
    for _ in range(10):
        await send_disappearing_message(message.chat.id, random.choice(ANOMALIES + FAKE_CONVERSATIONS + GLITCH_TEXTS), delay=3)
        await asyncio.sleep(2)

@dp.callback_query_handler(lambda c: c.data == "phantom")
async def phantom_button(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id, text="–Ω–∞–∂–∞—Ç–∏–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ. 03:47")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
